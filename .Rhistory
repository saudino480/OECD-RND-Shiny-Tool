length("SummerA")
compare <- function(str1, str2) {
if (nchar(str1) == nchar(str2)) {
'Equal Length.'
} else {'Not Equal Length'}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = rnorm(100)
MAD_calculations(v)
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = runif(100)
MAD_calculations(v)
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = runif(100, min = 0, max = 300)
MAD_calculations(v)
View(temp)
View(temp)
View(v_2)
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = c(2,5,7,4,5,78,1,39,4,2,5,19203,2,15,7)
MAD_calculations(v)
median(v)
v - median(v)
median(v-median(v)
)
MAD_calculations = function(v) {
temp_array <- (abs(v - median(v)))
MAD <- median(temp_array)
MAD
}
v = c(2,5,7,4,5,78,1,39,4,2,5,19203,2,15,7)
MAD_calculations(v)
abs(v-median(v))
x <- sum(sample(1:6, 2, replace=T))
interest_calculator <- function(principal, rate, year) {
interest_vector <- c(principal*((1 + rate/100)^year), year)
interest_vector;
}
interest_calculator(5000, 11.5, 15)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x) || x == ""))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x) || x == ""))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x)))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
View(ts_data)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE, na.strings=c("","NA"))
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x)))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
View(ts_data)
source('~/Documents/Bootcamp/R/Intro to R II/crapsv2_1.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R II/crapsv2_1.R', echo=TRUE)
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?names
?names(date$Country)
names(data$Country)
names(data$Country) = data$Country
names(data$Country)
names(data$Country) = as.character(data$Country)
names(data$Country) = as.character(data$Country)
names(data$Country)
View(data)
data$Country = unlist(data$Country)
names(data$Country) = data$Country
names(data$Country)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?dropdown
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?length
?grep
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
#Q2 PT1 ####
data(PlantGrowth)
g = PlantGrowth %>%
ggplot(aes(x = group, y = weight)) +
geom_boxplot()
g
temp = PlantGrowth %>%
group_by(group) %>%
summarise(sd(weight))
temp_c = PlantGrowth %>%
filter(group == "ctrl")
temp_t1 = PlantGrowth %>%
filter(group == "trt1")
temp_t2 = PlantGrowth %>%
filter(group == "trt2")
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
temp_c = PlantGrowth %>%
filter(group == "ctrl") %>%
unlist()
temp_t1 = PlantGrowth %>%
filter(group == "trt1") %>%
unlist()
temp_t2 = PlantGrowth %>%
filter(group == "trt2") %>%
unlist()
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
temp_c = PlantGrowth %>%
filter(group == "ctrl")
temp_t1 = PlantGrowth %>%
filter(group == "trt1")
temp_t2 = PlantGrowth %>%
filter(group == "trt2")
View(temp_c)
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
View(temp)
View(temp_c)
View(temp_t1)
View(temp_t2)
View(temp_t2)
bartlett.test(temp_c, temp_t1, temp_t2)
?bartlett.test
bartlett.test(temp, subset = group)
bartlett.test(group ~ weight, data = temp)
temp = PlantGrowth %>%
group_by(group)
bartlett.test(group ~ weight, data = temp)
bartlett.test(group ~ weight, data = PlantGrowth)
mosaicplot(HairEyeColor, shade = TRUE)
summary(HairEyeColor)
names(HairEyeColor)
colnames(HairEyeColor)
HairEyeColor
HairEyeColor["Female"] %>%
filter(Eye %in% c("Brown", "Blue")) %>%
mosaicplot(shade = TRUE)
library(tidyverse)
HairEyeColor["Female"] %>%
filter(Eye %in% c("Brown", "Blue")) %>%
mosaicplot(shade = TRUE)
HairEyeColor["Female"]
HairEyeColor
HairEyeColor[,1:2,2]
Reduced = HairEyeColor[,1:2,2]
HairEye_BRBUF = HairEyeColor[,1:2,2]
mosaicplot(HairEye_BRBUF, shade = TRUE)
chisq.test(HairEye_BRBUF)
HairEye_BRBUF
table(HairEye_BRBUF)
summary(HairEye_BRBUF)
summarise(HairEye_BRBUF)
var(HairEye_BRBUF)
sd(HairEye_BRBUF)
mean(HairEye_BRBUF)
sd(HairEye_BRBUF)
mean(HairEye_BRBUF)
sd(HairEye_BRBUF) #
HairEye_BRBUF
?aov
aov(temp$group ~ temp$weight)
summary(aov(temp$group ~ temp$weight))
summary(aov(temp$weight ~ temp$group))
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
install.packages("googleVis")
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp()
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?gvisLineChart
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?melt
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
label_maker = function(col1, col2) {
temp1 = as.character(col1)
temp2 = as.character(col2)
if (temp1[1] == "US Dollar" | temp1[1] == "National currency" | temp1[1] == "Persons") {
return(paste(temp1, "in", temp2, sep=" "))
} else if (temp1[1] == "Percentages") {
return("Percent (%)")
} else if (temp1[1] == "Growth rate") {
return("Growth Rate (%)")
} else {
return(temp1[1])
}
}
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
selectizeInput(inputId = ‘cateSelect’,
label = ‘Count of Categories’,
choices = (c(‘Categories’,
‘Frequency Count’,
‘Frequency Distribution’,
‘Word Count Distribution’))
),
test_function = function(input) {
switch(
input,
‘Categories’  = 1,
‘Frequency Count’  = 2,
‘Frequency Distribution’  = 3,
‘Word Count Distribution’  = 4
)
}
selectizeInput(inputId = ‘cateSelect’,
label = ‘Count of Categories’,
choices = (c(‘Categories’,
‘Frequency Count’,
‘Frequency Distribution’,
‘Word Count Distribution’))
),
test_function = function(input) {
switch(
input,
"Categories"  = 1,
"Frequency Count"  = 2,
"‘Frequency Distribution’"  = 3,
"‘Word Count Distribution’"  = 4
)
}
test_function(NULL)
test_function(NA)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
####making groupings
x = unique(data3$MSTI_VAR)
y = unique(data3$MSTI.Variables)
z = data.frame(x,y)
####making groupings
x = unique(data$MSTI_VAR)
y = unique(data$MSTI.Variables)
z = data.frame(x,y)
View(z)
?filter
filter_by_pattern = function(df, col, ptn) {
df[col] = grep(pattern = ptn, x = df[col])
}
test = data[grep(pattern = "H_", x = data["MSTI_VAR"])]
View(test)
data[grep(pattern = "H_", x = data["MSTI_VAR"])]
grep(pattern = "H_", x = data["MSTI_VAR"])
grep(pattern = "H[_]", x = data["MSTI_VAR"])
View(data)
grep(pattern = "H[_]", x = unlist(data["MSTI_VAR"]))
filter_by_pattern = function(df, col, ptn) {
df[col] = grep(pattern = ptn, x = unlist(df[col]))
}
filter_by_pattern = function(df, col, ptn) {
df[grep(pattern = ptn, x = unlist(df[col]))]
}
filter_by_pattern(data, "MSTI_VAR", "H_")
View(data)
filter_by_pattern(data, MSTI_VAR, "H_")
df[MSTI_VAR]
df %>% filter(grep(pattern = ptn, x = unlist(df[col])))
filter_by_pattern = function(df, col, ptn) {
df %>% filter(grep(pattern = ptn, x = unlist(df[col])))
}
filter_by_pattern(data, MSTI_VAR, "H_")
filter_by_pattern = function(df, col, ptn) {
df %>% filter(grep(pattern = ptn, x = unlist(df[as.character(col)])))
}
filter_by_pattern(data, MSTI_VAR, "H_")
test = data[grep(pattern = "H_", x = data["MSTI_VAR"])]
test = data[grep(pattern = "H_", x = unlist(data["MSTI_VAR"]))]
test = data[grepl(pattern = "H_", x = unlist(data["MSTI_VAR"]))]
df %>% filter(grepl(pattern = ptn, x = unlist(df[as.character(col)])))
filter_by_pattern = function(df, col, ptn) {
df %>% filter(grepl(pattern = ptn, x = unlist(df[as.character(col)])))
}
filter_by_pattern(data, MSTI_VAR, "H_")
filter_by_pattern = function(df, col, ptn) {
df %>% filter(grepl(pattern = ptn, x = col))
}
filter_by_pattern(data, MSTI_VAR, "H_")
?grepl
data[["MSTI_VAR"]]
filter_by_pattern = function(df, col, ptn) {
df %>% filter(unlist(lapply(col, grepl, pattern = ptn)))
}
filter_by_pattern(data, MSTI_VAR, "H_")
filter_by_pattern(data, "MSTI_VAR", "H_")
filter_by_pattern = function(df, col, ptn) {
df %>% filter(lapply(col, grepl, pattern = ptn))
}
filter_by_pattern(data, "MSTI_VAR", "H_")
filter_by_pattern = function(df, col, ptn) {
df %>% filter(unlist(lapply(col, grepl, pattern = ptn)))
}
filter_by_pattern(data, "MSTI_VAR", "H[_]")
library(stringr)
filter_by_pattern = function(df, col, ptn) {
df %>% filter(str_detect(col, ptn))
}
filter_by_pattern(data, "MSTI_VAR", "H[_]")
filter_by_pattern(data, "MSTI_VAR", "H_")
filter_by_pattern(data, MSTI_VAR, "H_")
filter_by_pattern = function(df, col, ptn) {
df %>% filter(str_detect(df[[col]], ptn))
}
filter_by_pattern(data, MSTI_VAR, "H_")
filter_by_pattern(data, "MSTI_VAR", "H_")
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp()
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
info_type = data %>%
filter_by_pattern("MSTI_VAR", "G_") %>%
select(MSTI.Variables, Unit) %>%
filter(Unit %in% "Percentage") %>%
select(MSTI.Variables)
View(info_type)
info_type = data %>%
filter_by_pattern("MSTI_VAR", "G[_]") %>%
select(MSTI.Variables, Unit) %>%
filter(Unit %in% "Percentage") %>%
select(MSTI.Variables)
info_type = data %>%
filter_by_pattern("MSTI_VAR", "H_") %>%
select(MSTI.Variables, Unit) %>%
filter(Unit %in% "Percentage") %>%
select(MSTI.Variables)
View(info_type)
info_type = data %>%
filter_by_pattern("MSTI_VAR", "_H[_]") %>%
select(MSTI.Variables, Unit) %>%
filter(Unit %in% "Percentage") %>%
select(MSTI.Variables)
_
info_type = data %>%
filter_by_pattern("MSTI_VAR", ".H_") %>%
select(MSTI.Variables, Unit) %>%
filter(Unit %in% "Percentage") %>%
select(MSTI.Variables)
View(info_type)
info_type = data %>%
filter_by_pattern("MSTI_VAR", ".H_") %>%
select(MSTI.Variables, Unit, MSTI_VAR) %>%
filter(Unit %in% "Percentage") %>%
select(MSTI.Variables, MSTI_VAR)
View(info_type)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
info_type = data %>%
filter_by_pattern("MSTI_VAR", ".H_")
View(info_type)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
View(data)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
setwd("~/Documents/Bootcamp/Project/ShinyProject/shinyProject")
runApp()
runApp()
data = read.csv(file = "../Science_Math_Spending.csv")
data1 = spread(data, key = unique(Country), value = Value)
names = colnames(data1)[14:59]
names[40:46]
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, COU) %>%
summarise_at(names, sum)
data3 = data2 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode) %>%
summarise_at(names, naSum, na.rm=TRUE)
countries = label_extractor(colnames(data3),
(c(22, 51, 21, 28, 42, 47, 27, 52, 13, 29, 30, 34, 11, 19, 20)-1))
data_labels = label_extractor(colnames(data3), 1:5)
data3 = data3 %>%
select(data_labels, countries)
data3$PowerCode[data3$Unit == ""] = "Millions"
data3$Unit[data3$Unit == ""] = "US Dollar"
temp_1 = data3 %>%
filter(MSTI_VAR == "VA_PPP" & YEAR != 2018)
temp_2 = data3 %>%
filter(MSTI_VAR == "GDP_PPP" & YEAR != 2018)
temp = temp_1
temp[countries] = temp_1[countries] / temp_2[countries]
temp$MSTI_VAR = as.factor("VA_XGDP")
temp$MSTI.Variables = as.factor("Value Added of Industry as a percent of GDP (current PPP$)")
temp$Unit = as.factor("Percentage")
temp$PowerCode = as.factor("Units")
temp_2$MSTI_VAR = as.factor("VA_GDPPPP")
View(temp_1)
View(temp_2)
library(tidyverse)
data = read.csv(file = "../Science_Math_Spending.csv")
data1 = spread(data, key = unique(Country), value = Value)
names = colnames(data1)[14:59]
names[40:46]
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, COU) %>%
summarise_at(names, sum)
data3 = data2 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode) %>%
summarise_at(names, naSum, na.rm=TRUE)
countries = label_extractor(colnames(data3),
(c(22, 51, 21, 28, 42, 47, 27, 52, 13, 29, 30, 34, 11, 19, 20)-1))
data_labels = label_extractor(colnames(data3), 1:5)
data3 = data3 %>%
select(data_labels, countries)
data3$PowerCode[data3$Unit == ""] = "Millions"
data3$Unit[data3$Unit == ""] = "US Dollar"
temp_1 = data3 %>%
filter(MSTI_VAR == "VA_PPP" & YEAR != 2018)
temp_2 = data3 %>%
filter(MSTI_VAR == "GDP_PPP" & YEAR != 2018)
temp = temp_1
temp[countries] = temp_1[countries] / temp_2[countries]
temp$MSTI_VAR = as.factor("VA_XGDP")
temp$MSTI.Variables = as.factor("Value Added of Industry as a percent of GDP (current PPP$)")
temp$Unit = as.factor("Percentage")
temp$PowerCode = as.factor("Units")
temp_2$MSTI_VAR = as.factor("VA_GDPPPP")
data3 = rbind(data3, temp)
data3 = rbind(data3, temp_2)
data3$YEAR = as.numeric(data3$YEAR)
data3$MSTI_VAR = as.factor(data3$MSTI_VAR)
data3$MSTI.Variables = as.factor(data3$MSTI.Variables)
data3$Unit = as.factor(data3$Unit)
data3$PowerCode = as.factor(data3$PowerCode)
write.csv(data3, file = "./data/Science_Math_Eigth_Clean.csv")
View(data3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
