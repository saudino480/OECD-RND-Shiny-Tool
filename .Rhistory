test_matrix = matrix(1:9, 4, 3)
v = c(2, 3, 4)
matrix_mult = function(matrix, vector) {
if (length(vector) == nrow(matrix)) {
y = rep(0, ncol(matrix))
for (i in 1:ncol(matrix)) {
for (j in 1:nrow(matrix)) {
y[i] = y[i] + matrix[j, i] * vector[j]
print(y[i])
print("first condition")
}
}
} else if (length(vector) == ncol(matrix)) {
y = rep(0, nrow(matrix))
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
y[i] = y[i] + matrix[i, j] * vector[j]
print(y[i])
print("second condition")
}
}
} else {
y = NULL
print("Please use a matrix and a vector that have compatable lengths.")}
y
}
result <- matrix_mult(test_matrix, v)
test_matrix = matrix(1:9, 4, 3)
v = c(2, 2, 2)
matrix_mult = function(matrix, vector) {
if (length(vector) == nrow(matrix)) {
y = rep(0, ncol(matrix))
for (i in 1:ncol(matrix)) {
for (j in 1:nrow(matrix)) {
y[i] = y[i] + matrix[j, i] * vector[j]
print(y[i])
print("first condition")
}
}
} else if (length(vector) == ncol(matrix)) {
y = rep(0, nrow(matrix))
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
y[i] = y[i] + matrix[i, j] * vector[j]
print(y[i])
print("second condition")
}
}
} else {
y = NULL
print("Please use a matrix and a vector that have compatable lengths.")}
y
}
result <- matrix_mult(test_matrix, v)
View(test_matrix)
View(test_matrix)
test_matrix = matrix(1:9, 3, 4)
v = c(2, 2, 2)
matrix_mult = function(matrix, vector) {
if (length(vector) == nrow(matrix)) {
y = rep(0, ncol(matrix))
for (i in 1:ncol(matrix)) {
for (j in 1:nrow(matrix)) {
y[i] = y[i] + matrix[j, i] * vector[j]
print(y[i])
print("first condition")
}
}
} else if (length(vector) == ncol(matrix)) {
y = rep(0, nrow(matrix))
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
y[i] = y[i] + matrix[i, j] * vector[j]
print(y[i])
print("second condition")
}
}
} else {
y = NULL
print("Please use a matrix and a vector that have compatable lengths.")}
y
}
result <- matrix_mult(test_matrix, v)
test_matrix = matrix(1:9, 4, 3)
v = c(2, 2, 2)
matrix_mult = function(matrix, vector) {
if (length(vector) == nrow(matrix)) {
y = rep(0, ncol(matrix))
for (i in 1:ncol(matrix)) {
for (j in 1:nrow(matrix)) {
y[i] = y[i] + matrix[j, i] * vector[j]
print(y[i])
print("first condition")
}
}
} else if (length(vector) == ncol(matrix)) {
y = rep(0, nrow(matrix))
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
y[i] = y[i] + matrix[i, j] * vector[j]
print(y[i])
print("second condition")
}
}
} else {
y = NULL
print("Please use a matrix and a vector that have compatable lengths.")}
y
}
result <- matrix_mult(test_matrix, v)
View(test_matrix)
View(test_matrix)
test_matrix = matrix(1:12, 4, 3)
v = c(2, 2, 2)
matrix_mult = function(matrix, vector) {
if (length(vector) == nrow(matrix)) {
y = rep(0, ncol(matrix))
for (i in 1:ncol(matrix)) {
for (j in 1:nrow(matrix)) {
y[i] = y[i] + matrix[j, i] * vector[j]
}
}
} else if (length(vector) == ncol(matrix)) {
y = rep(0, nrow(matrix))
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
y[i] = y[i] + matrix[i, j] * vector[j]
}
}
} else {
y = NULL
print("Please use a matrix and a vector that have compatable lengths.")}
y
}
result <- matrix_mult(test_matrix, v)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R I/R pt 2.R', echo=TRUE)
split_and_unlist = function(string) {
temp <- strsplit(string, split = ' ')
unlist(temp)
}
names <- "John Andrew Thomas"
names <- split_and_unlist(names)
split_and_unlist = function(string) {
temp <- strsplit(string, split = ' ')
unlist(temp)
}
names <- "John Andrew Thomas"
names <- split_and_unlist(names)
paste(names, "@gmail.com", sep ="; ")
split_and_unlist = function(string) {
temp <- strsplit(string, split = ' ')
unlist(temp)
}
names <- "John Andrew Thomas"
names <- split_and_unlist(names)
paste(names, "@gmail.com", collapse="; ")
split_and_unlist = function(string) {
temp <- strsplit(string, split = ' ')
unlist(temp)
}
names <- "John Andrew Thomas"
names <- split_and_unlist(names)
paste0(names, "@gmail.com", collapse="; ")
v1 <- letters[1:5]
v1 <- letters[1:5]
merge(v1, v1)
v1 <- letters[1:5]
temp <- merge(v1, v1)
v1 <- letters[1:5]
temp <- merge(v1, v1)
typeof(temp)
View(temp)
v1 <- letters[1:5]
temp <- unlist(merge(v1, v1))
paste0(temp$x, temp$y)
v1 <- letters[1:5]
temp <- unlist(merge(v1, v1))
paste0(temp[,1], temp[,2])
v1 <- letters[1:5]
temp <- merge(v1, v1)
paste0(temp[,1], temp[,2])
compare <- function(str1, str2) {
ifelse(length(str1) == length(str2), print('Equal Length.'), print('Not Equal Length'))
}
compare("EPS568", "Summer")
compare <- function(str1, str2) {
ifelse(length(str1) == length(str2), 'Equal Length.', 'Not Equal Length')
}
compare("EPS568", "Summer")
compare <- function(str1, str2) {
ifelse(length(str1) == length(str2), 'Equal Length.', 'Not Equal Length')
}
compare("EPS568", "Summer")
compare("EPS568", "SummerA")
compare <- function(str1, str2) {
ifelse(length(str1) == length(str2), 'Equal Length.', 'Not Equal Length')
}
compare("EPS568", "Summer")
compare("EPS568","SummerA")
compare <- function(str1, str2) {
ifelse(length(str1) == length(str2), 'Equal Length.', 'Not Equal Length')
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
compare <- function(str1, str2) {
if (length(str1) == length(str2)) {
'Equal Length.'
} else {'Not Equal Length'}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
length("SummerA")
compare <- function(str1, str2) {
if (nchar(str1) == nchar(str2)) {
'Equal Length.'
} else {'Not Equal Length'}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = rnorm(100)
MAD_calculations(v)
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = runif(100)
MAD_calculations(v)
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = runif(100, min = 0, max = 300)
MAD_calculations(v)
View(temp)
View(temp)
View(v_2)
MAD_calculations = function(v) {
temp_array <- (v - median(v))
MAD <- median(temp_array)
MAD
}
v = c(2,5,7,4,5,78,1,39,4,2,5,19203,2,15,7)
MAD_calculations(v)
median(v)
v - median(v)
median(v-median(v)
)
MAD_calculations = function(v) {
temp_array <- (abs(v - median(v)))
MAD <- median(temp_array)
MAD
}
v = c(2,5,7,4,5,78,1,39,4,2,5,19203,2,15,7)
MAD_calculations(v)
abs(v-median(v))
x <- sum(sample(1:6, 2, replace=T))
interest_calculator <- function(principal, rate, year) {
interest_vector <- c(principal*((1 + rate/100)^year), year)
interest_vector;
}
interest_calculator(5000, 11.5, 15)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x) || x == ""))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x) || x == ""))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x)))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
View(ts_data)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE, na.strings=c("","NA"))
dim(ts_data)
summary(ts_data)
sum(is.na(ts_data))
#We would like to use lapply to check which rows have /any/ NULL values.
#then we unlist it, because we would rather have a vector of what rows have
#any missing value.
#Unique is then applied to remove the cases where there are multiple NULLs in
#a single row.
unique (unlist (lapply(ts_data, function (x) which (is.na(x)))))
#Easier, just look at the columns and decide which ones have missing values.
apply(ts_data, 2, anyNA)
View(ts_data)
source('~/Documents/Bootcamp/R/Intro to R II/crapsv2_1.R', echo=TRUE)
source('~/Documents/Bootcamp/R/Intro to R II/crapsv2_1.R', echo=TRUE)
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?names
?names(date$Country)
names(data$Country)
names(data$Country) = data$Country
names(data$Country)
names(data$Country) = as.character(data$Country)
names(data$Country) = as.character(data$Country)
names(data$Country)
View(data)
data$Country = unlist(data$Country)
names(data$Country) = data$Country
names(data$Country)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?dropdown
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?length
?grep
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
#Q2 PT1 ####
data(PlantGrowth)
g = PlantGrowth %>%
ggplot(aes(x = group, y = weight)) +
geom_boxplot()
g
temp = PlantGrowth %>%
group_by(group) %>%
summarise(sd(weight))
temp_c = PlantGrowth %>%
filter(group == "ctrl")
temp_t1 = PlantGrowth %>%
filter(group == "trt1")
temp_t2 = PlantGrowth %>%
filter(group == "trt2")
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
temp_c = PlantGrowth %>%
filter(group == "ctrl") %>%
unlist()
temp_t1 = PlantGrowth %>%
filter(group == "trt1") %>%
unlist()
temp_t2 = PlantGrowth %>%
filter(group == "trt2") %>%
unlist()
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
temp_c = PlantGrowth %>%
filter(group == "ctrl")
temp_t1 = PlantGrowth %>%
filter(group == "trt1")
temp_t2 = PlantGrowth %>%
filter(group == "trt2")
View(temp_c)
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
View(temp)
View(temp_c)
View(temp_t1)
View(temp_t2)
View(temp_t2)
bartlett.test(temp_c, temp_t1, temp_t2)
?bartlett.test
bartlett.test(temp, subset = group)
bartlett.test(group ~ weight, data = temp)
temp = PlantGrowth %>%
group_by(group)
bartlett.test(group ~ weight, data = temp)
bartlett.test(group ~ weight, data = PlantGrowth)
mosaicplot(HairEyeColor, shade = TRUE)
summary(HairEyeColor)
names(HairEyeColor)
colnames(HairEyeColor)
HairEyeColor
HairEyeColor["Female"] %>%
filter(Eye %in% c("Brown", "Blue")) %>%
mosaicplot(shade = TRUE)
library(tidyverse)
HairEyeColor["Female"] %>%
filter(Eye %in% c("Brown", "Blue")) %>%
mosaicplot(shade = TRUE)
HairEyeColor["Female"]
HairEyeColor
HairEyeColor[,1:2,2]
Reduced = HairEyeColor[,1:2,2]
HairEye_BRBUF = HairEyeColor[,1:2,2]
mosaicplot(HairEye_BRBUF, shade = TRUE)
chisq.test(HairEye_BRBUF)
HairEye_BRBUF
table(HairEye_BRBUF)
summary(HairEye_BRBUF)
summarise(HairEye_BRBUF)
var(HairEye_BRBUF)
sd(HairEye_BRBUF)
mean(HairEye_BRBUF)
sd(HairEye_BRBUF)
mean(HairEye_BRBUF)
sd(HairEye_BRBUF) #
HairEye_BRBUF
?aov
aov(temp$group ~ temp$weight)
summary(aov(temp$group ~ temp$weight))
summary(aov(temp$weight ~ temp$group))
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided")
library(tidyverse)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided")
View(data)
bartlett.test(temp$weight ~ temp$group)
temp = PlantGrowth %>%
group_by(group) %>%
summarise(sd(weight))
temp = PlantGrowth %>%
group_by(group)
bartlett.test(temp$weight ~ temp$group)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?fluidRow
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?element_text
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?ylab
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?titlePanel
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?fluidPage
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
install.packages("shinydashboard")
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
library(shinydashboard)
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
library(dashboardshiny)
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
source("./helper.R")
setwd("~/Documents/Bootcamp/Project/ShinyProject/shinyProject")
source("./helper.R")
runApp()
runApp()
runApp()
