data(PlantGrowth)
g = PlantGrowth %>%
ggplot(aes(x = group, y = weight)) +
geom_boxplot()
g
temp = PlantGrowth %>%
group_by(group) %>%
summarise(sd(weight))
temp_c = PlantGrowth %>%
filter(group == "ctrl")
temp_t1 = PlantGrowth %>%
filter(group == "trt1")
temp_t2 = PlantGrowth %>%
filter(group == "trt2")
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
temp_c = PlantGrowth %>%
filter(group == "ctrl") %>%
unlist()
temp_t1 = PlantGrowth %>%
filter(group == "trt1") %>%
unlist()
temp_t2 = PlantGrowth %>%
filter(group == "trt2") %>%
unlist()
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
temp_c = PlantGrowth %>%
filter(group == "ctrl")
temp_t1 = PlantGrowth %>%
filter(group == "trt1")
temp_t2 = PlantGrowth %>%
filter(group == "trt2")
View(temp_c)
bartlett.test(temp_c$weight, temp_t1$weight, temp_t2$weight)
View(temp)
View(temp_c)
View(temp_t1)
View(temp_t2)
View(temp_t2)
bartlett.test(temp_c, temp_t1, temp_t2)
?bartlett.test
bartlett.test(temp, subset = group)
bartlett.test(group ~ weight, data = temp)
temp = PlantGrowth %>%
group_by(group)
bartlett.test(group ~ weight, data = temp)
bartlett.test(group ~ weight, data = PlantGrowth)
mosaicplot(HairEyeColor, shade = TRUE)
summary(HairEyeColor)
names(HairEyeColor)
colnames(HairEyeColor)
HairEyeColor
HairEyeColor["Female"] %>%
filter(Eye %in% c("Brown", "Blue")) %>%
mosaicplot(shade = TRUE)
library(tidyverse)
HairEyeColor["Female"] %>%
filter(Eye %in% c("Brown", "Blue")) %>%
mosaicplot(shade = TRUE)
HairEyeColor["Female"]
HairEyeColor
HairEyeColor[,1:2,2]
Reduced = HairEyeColor[,1:2,2]
HairEye_BRBUF = HairEyeColor[,1:2,2]
mosaicplot(HairEye_BRBUF, shade = TRUE)
chisq.test(HairEye_BRBUF)
HairEye_BRBUF
table(HairEye_BRBUF)
summary(HairEye_BRBUF)
summarise(HairEye_BRBUF)
var(HairEye_BRBUF)
sd(HairEye_BRBUF)
mean(HairEye_BRBUF)
sd(HairEye_BRBUF)
mean(HairEye_BRBUF)
sd(HairEye_BRBUF) #
HairEye_BRBUF
?aov
aov(temp$group ~ temp$weight)
summary(aov(temp$group ~ temp$weight))
summary(aov(temp$weight ~ temp$group))
shiny::runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
install.packages("googleVis")
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp()
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?gvisLineChart
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
?melt
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
runApp('~/Documents/Bootcamp/Project/ShinyProject/shinyProject')
data = read.csv(file = "../Science_Math_Spending.csv")
data = data %>%
mutate(src = substr(MSTI_VAR, 1, 2))
data1 = spread(data, key = unique(Country), value = Value)
names = colnames(data1)[15:60]
names[40:46]
setwd("~/Documents/Bootcamp/Project/ShinyProject/shinyProject")
data = read.csv(file = "../Science_Math_Spending.csv")
data = data %>%
mutate(src = substr(MSTI_VAR, 1, 2))
data1 = spread(data, key = unique(Country), value = Value)
names = colnames(data1)[15:60]
data = data %>%
mutate(src = substr(MSTI_VAR, 1, 2))
library(shiny)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(shinyWidgets)
library(googleVis)
data = data %>%
mutate(src = substr(MSTI_VAR, 1, 2))
data1 = spread(data, key = unique(Country), value = Value)
names = colnames(data1)[15:60]
names[40:46]
data2 = data1 %>%
filter(!complete.cases(data1[names]))
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src, COU) %>%
summarise_at(names, debugSum)
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src, COU) %>%
summarise_at(names, sum)
View(data2)
naSum = function(x, ...) {
if(all(unlist(lapply(x, is.na)))) {
return(NA)
} else {
sum(x, ...)
}
}
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src) %>%
data3 = data2 %>%
group_by(YEAR, MSTI_VAR) %>%
summarise(naSum)
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src) %>%
data3 = data2 %>%
group_by(YEAR, MSTI_VAR) %>%
summarise(sum)
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src) %>%
data3 = data2 %>%
group_by(YEAR, MSTI_VAR) %>%
summarise(names, naSum)
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src) %>%
data3 = data2 %>%
group_by(YEAR, MSTI_VAR) %>%
summarise_at(names, naSum)
data3 = data2 %>%
group_by(YEAR, MSTI_VAR) %>%
summarise_at(names, naSum)
View(data3)
data3 = data2 %>%
group_by(YEAR, MSTI_VAR) %>%
summarise_at(names, naSum, na.rm=TRUE)
View(data3)
data = read.csv(file = "../Science_Math_Spending.csv")
data = data %>%
mutate(src = substr(MSTI_VAR, 1, 2))
data1 = spread(data, key = unique(Country), value = Value)
names = colnames(data1)[15:60]
names[40:46]
data2 = data1 %>%
filter(!complete.cases(data1[names]))
data2 = data1 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src, COU) %>%
summarise_at(names, sum)
View(data2)
data3 = data2 %>%
group_by(YEAR, MSTI_VAR, MSTI.Variables, Unit, PowerCode, src) %>%
summarise_at(names, naSum, na.rm=TRUE)
write.csv(data3, file = "./data/Science_Math_Seventh_Clean.csv")
View(data3)
library(dplyr)
library(tidyverse)
runApp()
runApp()
runApp()
?split
?grep
View(unique(data3$MSTI_VAR))
x = "B_AERO"
y = data3$MSTI_VAR
x = strsplit(x, split = "")
View(x)
x = unlist(strsplit(x, split = ""))
x = "B_AERO"
x = unlist(strsplit(x, split = ""))
x = "B_AERO"
y = str_to_lower(as.character(data3$MSTI_VAR))
y = as.character(data3$MSTI_VAR)
x = unlist(strsplit(x, split = ""))
grep(c(x, "x"), y)
grepl("_X", x)
x = "B_AERO"
grepl("_X", x)
gsub("_X", x)
x = "B_AERO"
gsub("_X", x = x)
gsub("_", replacement = "_X", x = x)
y = unlist(lapply(x, gsub, pattern = "_", replacement = "_X"))
x = as.character(data3$MSTI_VAR)
y = unlist(lapply(x, gsub, pattern = "_", replacement = "_X"))
z = x %in% y
z = x[x %in% y]
z = list(x[x %in% y])
View(z)
z = df(x[x %in% y])
z = data.frame(x[x %in% y])
View(z)
y = unique(unlist(lapply(x, gsub, pattern = "_", replacement = "_X")))
z = data.frame(x[x %in% y])
View(z)
x = as.character(data3$MSTI_VAR)
y = unique(unlist(lapply(x, gsub, pattern = "_", replacement = "_X")))
z = data.frame(unique(x[x %in% y]))
View(z)
z = data.frame(x[x %in% y])
View(z)
z = data.frame(unique(x[x %in% y]))
View(data)
B_XALL = "Percentage of BERD performed in all industries (current PPP $)"
y = as.character(data3$MSTI.Variables)
z = data.frame(unique(x), unique(y))
View(z)
B_ALL = z[c(5,6,7,15),1]
B_ALL = z[[c(5,6,7,15),1]
B_ALL = z[[c(5,6,7,15),1]]
B = z[[c(5,6,7,15),1]]
B = z[c(5,6,7,15),1]
B = z$unique.x.[c(5,6,7,15)]
B_XALL = gsub("_", replacement = "_X", x = B_ALL)
B_ALL = c("B_AERO", "B_COMP", "B_DRUG", "B_SERV")
B_XALL = c(gsub("_", replacement = "_X", x = B_ALL), "B_XVA")
temp = c("C_ECO", "C_EDU", "C_GUF", "C_HEA", "C_NOR", "C_SPA")
temp = c("C_ECO", "C_EDU", "C_GUF", "C_HEA", "C_NOR", "C_SPA")
C_PROGPPP = paste(temp, "PPP")
C_PROGPPP = paste(temp, "PPP", sep="")
C_PROGXCV = paste(temp, "XCV", sep="")
runApp()
runApp()
runApp()
runApp()
runApp()
G_ALLXGDP = c("G_BRXGDP", "G_CVXGDP", "G_FBXGDP", "G_FGXGDP")
G_XALL = as.character(z$unique.x.[[63:66]])
G_XALL = as.character(z$unique.x.[[63]])
G_XALL = as.character(z$unique.x.[[c(63:66)]])
G_XALL = as.character(z$unique.x.[[63,64,65,66]])
G_XALL = as.character(z$unique.x.[[63,64,65,66]])
label_extractor = function(df, start, end) {
temp = ""
for (i in start:end) {
temp = paste(temp, df[[i]])
}
temp = unlist(strsplit(temp, sep=" "))
}
test = label_extractor(z, 63, 66)
temp = paste(temp, as.character(df$col[[i]]))
label_extractor = function(df, col, start, end) {
temp = ""
for (i in start:end) {
temp = paste(temp, as.character(df$col[[i]]))
}
temp = unlist(strsplit(temp, sep=" "))
}
test = label_extractor(z, unique.x., 63, 66)
label_extractor = function(df, col, start, end) {
temp = ""
for (i in start:end) {
temp = paste(temp, as.character(df$col[[i]]))
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z, unique.x., 63, 66)
label_extractor = function(df, col, start, end) {
temp = ""
for (i in start:end) {
temp = paste(temp, as.character(df$col[[i]]))
print(temp)
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z, unique.x., 63, 66)
label_extractor = function(df, col, start, end) {
temp = ""
for (i in start:end) {
temp = paste(temp, as.character(df[col][[i]]))
print(temp)
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z, "unique.x.", 63, 66)
label_extractor = function(df, start, end) {
temp = ""
for (i in start:end) {
temp = paste(temp, as.character(df[[i]]))
print(temp)
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z, "unique.x.", 63, 66)
test = label_extractor(z, 63, 66)
test = label_extractor(z, 1, 10)
?select
?filter
x = list(x)
x[10]
x[[10]]
x[[10,]]
x[[,10]]
x[[11,10]]
label_extractor = function(df, col, start, end) {
temp = ""
temp_df = unlist(df[col])
for (i in start:end) {
temp = paste(temp, as.character(temp_df[i]))
print(temp)
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z, 1, 10)
test = label_extractor(z, unique.x., 1, 10)
label_extractor = function(df, start, end) {
temp = ""
temp_df = unlist(df)
for (i in start:end) {
temp = paste(temp, as.character(temp_df[i]))
print(temp)
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z$unique.x., 1, 10)
label_extractor = function(df, start, end) {
temp_df = unlist(df)
temp = as.character(temp_df[start])
for (i in start:(end-1)) {
temp = paste(temp, as.character(temp_df[i+1]))
print(temp)
}
temp = unlist(strsplit(temp, split = " "))
}
test = label_extractor(z$unique.x., 1, 10)
G_XALL = label_extractor(z$unique.x., 63, 66)
G_XALLFI = label_extractor(z$unique.x., 67, 70)
label_extractor = function(df, start, end) {
temp_df = unlist(df)
temp = as.character(temp_df[start])
for (i in start:(end-1)) {
temp = paste(temp, as.character(temp_df[i+1]))
}
temp = unlist(strsplit(temp, split = " "))
}
for (i in c(10, 14, 15)) {
print(i)
}
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = as.character(temp_df[start])
for (i in idx) {
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
} else {
temp = as.character(df[i])
}
}
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
G_XALLPR = label_extractor(z$unique.x., c(63:66))
typeof(66:69)
66:69
for (i in 66:69) {}
for (i in 66:69) {print(i)}
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = for (i in idx) {
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
} else {
temp = as.character(df[i])
}
}
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = for (i in idx) {
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
} else {
temp = as.character(temp_df[i])
}
}
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = for (i in idx) {
print(i)
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
print(paste("if statement", temp, i, sep= " : "))
} else {
temp = as.character(temp_df[i])
print(paste("else statement", temp, i, sep= " : "))
}
}
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = for (i in idx) {
print(i)
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
print(paste("if statement", temp, i, sep= " : "))
} else {
temp = as.character(temp_df[i])
print(paste("else statement", temp, i, sep= " : "))
}
}
print(typeof(temp))
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = ""
for (i in idx) {
print(i)
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
print(paste("if statement", temp, i, sep= " : "))
} else {
temp = as.character(temp_df[i])
print(paste("else statement", temp, i, sep= " : "))
}
}
print(typeof(temp))
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
label_extractor = function(df, idx) {
temp_df = unlist(df)
temp = ""
for (i in idx) {
#print(i)
if (i != idx[1]) {
temp = paste(temp, as.character(temp_df[i]))
#print(paste("if statement", temp, i, sep= " : "))
} else {
temp = as.character(temp_df[i])
#print(paste("else statement", temp, i, sep= " : "))
}
}
#print(typeof(temp))
temp = unlist(strsplit(temp, split = " "))
}
G_XALLPR = label_extractor(z$unique.x., 63:66)
G_XALLFI = label_extractor(z$unique.x., 67:70)
GH_WRSRS = label_extractor(z$unique.x., 75:76)
TD_MRKT = label_extractor(z$unique.x., 125:127)
TD_BALANCE = labal_extractor(z$unique.x., 116:118)
TD_EXPO = label_extractor(z$unique.x., 119:121)
TD_IMPO = label_extractor(z$unique.x., 122:124)
TH_WRSRS = label_extractor(z$unique.x., 128:129)
TP_RSCOMBO = label_extractor(z$unique.x., 134:135)
TP_TTCOMBO = label_extractor(z$unique.x., 138:139)
VA_GDP = label_extractor(z$unique.x., c(74, 142))
B_ALL = label_extractor(z$unique.x., c(5:7, 15))
B_XALL = label_extractor(z$unique.x., c(16:18, 24))
BH_WRSRS = label_extractor(z$unique.x., 26:27)
B_ALL = label_extractor(z$unique.x., c(5:7, 15))
B_XALL = label_extractor(z$unique.x., c(16:18, 24))
B_XFIN = label_extractor(z$unique.x., 19:22)
B_GPDXVA = label_extractor(z$unique.x., c(23, 25))
BH_WRSRS = label_extractor(z$unique.x., 26:27)
G_ALLXGDP = label_extractor(z$unique.x., 55:58)
GDP_ALL = label_extractor(z$unique.x., c(23,71,88,94))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line2 <- gvisLineChart(df, "country", c("val1","val2"),
options=list(
series="[{targetAxisIndex: 0},
{targetAxisIndex:1}]",
vAxes="[{title:'val1'}]"
))
plot(Line2)
Combo <- gvisComboChart(df, xvar="country",
yvar=c("val1", "val2"),
options=list(seriesType="bars",
series='{1: {type:"line"}}'))
test = gvisMerge(Line2, Combo)
plot(test)
?gvisMerge
